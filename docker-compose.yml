---
services:
  scribe-ts:
    image: tailscale/tailscale:latest
    container_name: ${STACK_NAME}-ts
    hostname: ${TS_HOSTNAME}
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - "TS_EXTRA_ARGS=--advertise-tags=tag:container --reset"
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
    volumes:
      - scribe-ts-state:/var/lib/tailscale
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
    restart: unless-stopped
    # Expose Prometheus / Alertmanager (and snmp_exporter) via Tailscale
    ports:
      - "${PROM_PORT:-9090}:9090"     # Prometheus
      - "${AM_PORT:-9093}:9093"       # Alertmanager
      - "${SNMP_EXP_PORT:-9116}:9116" # snmp_exporter

  # One-shot init to write configs into shared volumes
  scribe-init:
    image: alpine:3.20
    container_name: ${STACK_NAME}-init
    depends_on:
      - scribe-ts
    volumes:
      - scribe-prom-config:/etc/prometheus
      - scribe-prom-rules:/etc/prometheus/rules
      - scribe-am-config:/etc/alertmanager
      - scribe-snmp-config:/etc/snmp_exporter
    command: >
      sh -c '
      set -eu

      : "${PRINTER_TARGETS:=HP-LaserJet.local:161,HP-OfficeJet.local:161}";
      : "${SNMP_COMMUNITY:=public}";
      : "${SNMP_VERSION:=2c}";
      : "${ALERT_WEBHOOK_URL:=}";

      # ---- snmp_exporter snmp.yml (simple Printer-MIB walk) ----
      cat > /etc/snmp_exporter/snmp.yml <<EOF
      modules:
        printer:
          auth:
            community: "${SNMP_COMMUNITY}"
            version: "${SNMP_VERSION}"
          walk:
            # prtMarkerSupplies*: description/max/level
            - 1.3.6.1.2.1.43.11.1.1.6
            - 1.3.6.1.2.1.43.11.1.1.8
            - 1.3.6.1.2.1.43.11.1.1.9
            # prtMarkerLifeCount (total pages on some models)
            - 1.3.6.1.2.1.43.10.2.1.4
      EOF

      # ---- Prometheus config ----
      # Scrapes snmp_exporter and passes each printer as __param_target
      cat > /etc/prometheus/prometheus.yml <<EOF
      global:
        scrape_interval: 1m
      rule_files:
        - /etc/prometheus/rules/*.yml
      scrape_configs:
        - job_name: "printers"
          metrics_path: /snmp
          static_configs:
            - targets: [${PRINTER_TARGETS//,/","}]
          params:
            module: ["printer"]
          relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target
            - source_labels: [__param_target]
              target_label: instance
            - target_label: __address__
              replacement: snmp-exporter:9116
      EOF

      # ---- Prometheus alert rules ----
      # NOTE: snmp_exporter without the generator produces numeric OID metric names.
      # We alert off state reasons when present and on supply level ratios when exposed.
      cat > /etc/prometheus/rules/printers.yml <<EOF
      groups:
      - name: printer-alerts
        rules:
        # Generic: if a marker level exists alongside a max capacity, alert when <10%
        - alert: TonerOrInkLow
          expr: |
            (1.3.6.1.2.1.43.11.1.1.9 / ignoring(type,index) (1.3.6.1.2.1.43.11.1.1.8 > 0))
              < 0.10
          for: 10m
          labels: { severity: warning }
          annotations:
            summary: "Supply low on {{ $labels.instance }}"
            description: "A supply has fallen below 10% (OID prtMarkerSuppliesLevel/MaxCapacity)."

        # Heuristic: page counter jump (if printer exposes prtMarkerLifeCount)
        - alert: HighPrintVolume
          expr: increase(1.3.6.1.2.1.43.10.2.1.4[1h]) > 200
          for: 10m
          labels: { severity: info }
          annotations:
            summary: "High print volume on {{ $labels.instance }}"
            description: "More than 200 pages in the last hour."
      EOF

      # ---- Alertmanager config (webhook optional) ----
      if [ -n "$ALERT_WEBHOOK_URL" ]; then
        cat > /etc/alertmanager/alertmanager.yml <<EOF
        route:
          receiver: "webhook"
        receivers:
          - name: "webhook"
            webhook_configs:
              - url: "${ALERT_WEBHOOK_URL}"
        EOF
      else
        # No-op config to keep Alertmanager happy if no webhook is set
        cat > /etc/alertmanager/alertmanager.yml <<EOF
        route:
          receiver: "devnull"
        receivers:
          - name: "devnull"
        EOF
      fi

      echo "Config written."
      '
    restart: "no"

  snmp-exporter:
    image: prom/snmp-exporter:latest
    container_name: ${STACK_NAME}-snmp
    network_mode: service:scribe-ts
    depends_on:
      - scribe-init
    volumes:
      - scribe-snmp-config:/etc/snmp_exporter
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: ${STACK_NAME}-prom
    network_mode: service:scribe-ts
    depends_on:
      - scribe-init
      - snmp-exporter
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=${PROM_RETENTION:-15d}
    volumes:
      - scribe-prom-config:/etc/prometheus
      - scribe-prom-data:/prometheus
      - scribe-prom-rules:/etc/prometheus/rules
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: ${STACK_NAME}-am
    network_mode: service:scribe-ts
    depends_on:
      - scribe-init
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager
    volumes:
      - scribe-am-config:/etc/alertmanager
      - scribe-am-data:/alertmanager
    restart: unless-stopped

volumes:
  scribe-ts-state:
    name: ${STACK_NAME}-state
    driver: local

  scribe-prom-config:
    name: ${STACK_NAME}-prom-config
    driver: local
  scribe-prom-data:
    name: ${STACK_NAME}-prom-data
    driver: local
  scribe-prom-rules:
    name: ${STACK_NAME}-prom-rules
    driver: local

  scribe-am-config:
    name: ${STACK_NAME}-am-config
    driver: local
  scribe-am-data:
    name: ${STACK_NAME}-am-data
    driver: local

  scribe-snmp-config:
    name: ${STACK_NAME}-snmp-config
    driver: local
